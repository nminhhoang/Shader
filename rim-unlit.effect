// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: legacy/main-functions/general-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: white }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
        rimLightColor:        { value: [1, 1, 0, 1], target: rimColor, editor: {displayName: Rim Color, type: color } }
        rimLightStrengthen:   { value: 1.0, target: rimColor.w, editor: {slide: true, range: [0, 10.0], step: 0.001 } }
        rimLightPow:          { value: 3.0, editor: {slide: true, range: [1.0, 9.0], step: 0.1 } }
        speed:                { value: 1.0, editor: {slide: true, range: [1.0, 10.0], step: 0.1 } }
  - name: transparent
    passes:
    - vert: general-vs:vert # builtin header
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output>
  #include <legacy/fog-fs>

  in vec2 v_uv;
  in vec3 v_position;
  in vec3 v_normal;

  uniform sampler2D mainTexture;

  uniform Constant {
    vec4 mainColor;
    vec4 rimColor;
    float rimLightPow;
    float speed;
  };

  vec4 frag () {
    vec4 col = mainColor * texture(mainTexture, v_uv);
    float fresnel = (1.0 - dot(normalize(cc_cameraPos.xyz - v_position), normalize(v_normal)));
    fresnel = pow(fresnel, rimLightPow);
    col.rgb = mix(col.rgb, rimColor.rgb * rimColor.w, fresnel * abs(sin(cc_time.x * speed)));

    CC_APPLY_FOG(col, v_position);
    return CCFragOutput(col);
  }
}%
