// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        speed: { value: 1.0, editor: { slide: true, range: [0, 10.0], step: 0.001 } }
        outlineThickness: { value: 1.0, editor: { slide: true, range: [0, 20.0], step: 0.1 } }
        outlineColor1: { value: [1.0, 0.0, 0.0, 1.0], editor: {type: color} }
        outlineColor2: { value: [0.0, 1.0, 0.0, 1.0], editor: {type: color} }
        noiseTexture: { value: white }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <common/common-define>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 color;
  in vec2 uv0;

  uniform Constant {
    vec4 outlineColor1;
    vec4 outlineColor2;
    float speed;
    float outlineThickness; 
  };

  uniform sampler2D noiseTexture;

  #pragma builtin(local)
  layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);
    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
    
    #if IS_GRAY
      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
      o.r = o.g = o.b = gray;
    #endif
    
    o *= color;

    vec2 size = 1.0 / cc_nativeSize.xy * outlineThickness;
    float outline = texture(cc_spriteTexture, uv0 + vec2(-size.x, 0)).a;
	  outline += texture(cc_spriteTexture, uv0 + vec2(0, size.y)).a;
	  outline += texture(cc_spriteTexture, uv0 + vec2(size.x, 0)).a;
	  outline += texture(cc_spriteTexture, uv0 + vec2(0, -size.y)).a;
	  outline += texture(cc_spriteTexture, uv0 + vec2(-size.x, size.y)).a;
	  outline += texture(cc_spriteTexture, uv0 + vec2(size.x, size.y)).a;
	  outline += texture(cc_spriteTexture, uv0 + vec2(-size.x, -size.y)).a;
	  outline += texture(cc_spriteTexture, uv0 + vec2(size.x, -size.y)).a;
	  outline = min(outline, 1.0);

    vec2 moveUV = uv0;
    moveUV.xy -= cc_time.xx * speed;
    //moveUV.xy -= fract(cc_time.xx * speed);
    vec4 noiseColor = texture(noiseTexture, moveUV);
    vec4 outlineColor = outlineColor1 * noiseColor + outlineColor2 * (1.0 - noiseColor);

    o = mix(o, outlineColor, outline - o.a);

    ALPHA_TEST(o);
    return o;
  }
}%